{"version":3,"file":"static/webpack/static/development/pages/index.js.0bc764aaf931b6274e7a.hot-update.js","sources":["webpack:///./components/CreateCashOrder.js"],"sourcesContent":["import React, { Component } from \"react\";\nconst debug = require(\"debug\")(\"app:DEBUG\");\n//const config = require(\"config\");\nimport { Dropdown, Button, Form, Message, Label, Input } from 'semantic-ui-react';\nimport { Link } from \"../routes\";\nconst fetch = require('cross-fetch');\n\n\nconst financial_institution_list=[\n    {\n        text: 'bankA',\n        value: 'bankA'\n    },\n    {\n        text: 'bankB',\n        value: 'bankB'\n    }\n];\n\n\nclass CreateCashOrder extends Component {\n    constructor(props) {\n        super(props);\n        //console.log(`Constructor:${props}`);\n        //debug(`Constructor:${props.user}`);\n        //debug(props);\n        this.state = {\n            user: props.user,\n            bank: \"\",\n            eCashOrder: \"\",\n            value: \"\",\n            statusMessage:\"\",\n            loading:false\n        };\n    }\n    financial_institution_list=[\n        {\n            text: 'bankA',\n            value: 'bankA'\n        },\n        {\n            text: 'bankB',\n            value: 'bankB'\n        }\n    ];\n    componentDidMount() {\n        console.log(`componentDidMount:${this.state.user}`);\n        debug(`componentDidMount:${this.state.user}`);\n    }\n    checkValue= (event)=>{\n        const r = event.target.value;\n        console.log(r);\n        let parseValue=Number.parseFloat(r);\n        \n        if (Number.isNaN(parseValue)) {\n            \n            this.setState({value:\"\"});\n            this.setState({statusMessage:\"numeric value\"});\n            return;\n        }\n        if(r.endsWith(\".\") || r.endsWith(\"0\")) {\n            parseValue=r;\n        }else{\n            parseValue=parseValue.toString();\n        }\n        this.setState({value:parseValue})\n        this.setState({statusMessage:\"\"})\n    };\n\n    onSubmit=async (event)=>{\n        event.preventDefault();//avoid browser to auto-submit the form\n        const headers = {};\n        headers[\"Content-Type\"]=\"application/json\";\n\n        data={\n            userid:this.user,\n            finEntity:this.bank,\n            amount:this.value,\n            DepositOrLoan:\"Deposit\"\n        };\n\n        \n        const URL=\"http://localhost:8001/api/ecashorder\";//config.get(\"ecashorder\");\n\n        const response = await fetch(URL, {\n            method: 'POST',\n            mode: 'CORS',\n            body: JSON.stringify(data),\n            headers: headers\n        });\n        console.log(await response.json());\n    };\n\n    render() {\n\n        return (\n\n            <div>\n                <h1> {this.state.user} prepares eCash Order from a financial institution</h1>\n                <Form onSubmit={this.onSubmit}  error={this.state.statusMessage.length>0} >\n                    \n                    <Form.Field>\n                        <label>Amount</label>\n\n                        <Input\n                            label=\"$\"\n                            labelPosition='left'\n                            placeholder='numeric value'\n                            value={this.state.value}\n                            onChange={this.checkValue}\n                        />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Financial institution</label>\n                        <Dropdown placeholder='Choose financial institution' fluid selection options={this.financial_institution_list} value={this.state.bank} \n                            onChange={(event)=>{ this.setState({  bank:event.target.value})} }/>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Remark</label>\n                        <Input labelPosition='right'\n                            placeholder='Project description'\n                            value={this.value}\n                        />\n                    </Form.Field>\n                    <Button loading={this.state.loading} primary={true} type='submit'>Create!</Button>\n                    <Message error header=\"oops!\" content={this.state.statusMessage} />\n                </Form>\n                \n            </div>\n        );\n    }\n\n     \n}\n\nexport default CreateCashOrder;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAgBA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AApBA;AA6BA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAdA;AAAA;AAgBA;AACA;AACA;AACA;AAJA;AACA;AAhBA;AAeA;AAfA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjDA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AALA;AAaA;AACA;;;AAUA;AACA;AACA;AACA;;;AA6CA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;;;;AA9GA;AACA;AAkHA;;;;A","sourceRoot":""}